# -*- coding: utf-8 -*-
"""day0802_colab_keras35_lstm_mlp2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14XvzwSIvNvK0hmzZwCGG355pF5Qz35zF
"""

# -*- coding: utf-8 -*-
"""day0802_colab_keras35_lstm_mlp1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jHYOiQ4NHbAlSm2lZpVP8qwXACk67x3y
"""

import numpy as np
from keras.models import Sequential
from keras.layers import Dense, LSTM
# from sklearn import standard



x = np.array(range(1,101))
print(x)

size = 8

def split_5(seq, size):


    aaa=[]
    for i in range(len(seq)-size+1):
        subset = seq[i:(i+size)]
        aaa.append(subset)

    print(type(aaa))
    return np.array(aaa)


dataset=split_5(x, size)
print("==================")


print(dataset)
x = dataset[:,:-4]
y = dataset[:,-4:]
# print(x)
print(x.shape)
# print(y)
print(y.shape)

x = x.reshape(x.shape[0],-1,2)
print(x)

# x_test = np.array([[[11],
#   [12],
#   [13],
#   [14]],

#  [[12],
#   [13],
#   [14],
#   [15]],

#  [[13],
#   [14],
#   [15],
#   [16]],

#  [[14],
#   [15],
#   [16],
#   [17]],

#  [[15],
#   [16],
#   [17],
#   [18]],

#  [[16],
#   [17],
#   [18],
#   [19]]])

# y_test = np.array([15, 16, 17, 18, 19, 20])

# print(x.shape)
# print(y.shape)
# print(x_test.shape)
# print(y_test.shape)

from sklearn.model_selection import train_test_split
# x, _, y, _ = train_test_split(x, y, random_state=66, test_size = 0.2)

x_test =[[[111,112],[113,114]],[[112,113],[114,115]],[[114,115],[116,117]],[[118,119],[120,121]]]
x_test = np.array(x_test)
y_test = [[115,116,117,118],[116,117,118,119],[117,118,119,120],[118,119,120,121]]
y_test = np.array(y_test)

#모델구성

model = Sequential()

model.add(LSTM(32, input_shape=(2,2),return_sequences=False))


# model.add(LSTM(10))

model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(5, activation="relu"))
model.add(Dense(3))
model.add(Dense(4))
model.summary()
model.compile(loss = "mse",optimizer="adadelta", metrics=['accuracy'])
from keras.callbacks import EarlyStopping
early = EarlyStopping(monitor="loss", patience=500, mode="auto")
model.fit(x,y,epochs=3000, callbacks=[early])
print(x_test.shape)
loss, acc = model.evaluate(x_test, y_test)
y_ = model.predict(x_test)
print(y_, "ori: ",y_test)
print(loss, acc)
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import mean_absolute_error
def RMSE(y_test, y_):
    return np.sqrt(mean_squared_error(y_test,y_))
def RMAE(y_test, y_):
    return np.sqrt(mean_absolute_error(y_test,y_))
print("RMSE:",RMSE(y_test,y_))
print("RMAE:",RMAE(y_test,y_))
print("r2:",r2_score(y_test,y_))

